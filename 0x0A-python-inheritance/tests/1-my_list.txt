The ``1-my_list`` module
=======================

Usage of ``1-my_list``
----------------------

Importing the class from the module:
    >>> MyList = __import__('1-my_list').MyList

Testing class type:
    >>> ml = MyList()
    >>> isinstance(ml, MyList)
    True

Testing instance type:
    >>> ml = MyList()
    >>> isinstance(ml, list)
    True

Checking `print_sorted` method as an instance method:
    >>> isinstance(MyList.__dict__['print_sorted'], types.FunctionType)
    True

Calling `print_sorted` without arguments results in an error:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

Calling `print_sorted` with one argument results in an error:
    >>> ml.print_sorted([4, 2, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Calling `print_sorted` with two arguments results in an error:
    >>> ml.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Testing `print_sorted` on an empty list:
    >>> ml = MyList()
    >>> ml.print_sorted()
    []

Testing `print_sorted` with a list:
    >>> ml = MyList([2, 10, 1])
    >>> ml.print_sorted()
    [1, 2, 10]

Testing `print_sorted` with another list:
    >>> ml = MyList([1, 4, 2, 3, 5])
    >>> ml.print_sorted()
    [1, 2, 3, 4, 5]

Testing `print_sorted` with negative integers in the list:
    >>> ml = MyList([-1000, -98, -232565, 0, -23423434, -123])
    >>> ml.print_sorted()
    [-23423434, -232565, -1000, -123, -98, 0]

Verifying that the original list remains unchanged:
    >>> ml = MyList([2, 10, 1, -10, 20, 100, 0])
    >>> ml.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]
    >>> ml
    [2, 10, 1, -10, 20, 100, 0]

Testing `print_sorted` with an already sorted list:
    >>> ml = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> ml.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]

Testing append method:
    >>> ml = MyList()
    >>> ml.append(10)
    >>> ml
    [10]

